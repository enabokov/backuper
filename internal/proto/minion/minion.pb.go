// Code generated by protoc-gen-go. DO NOT EDIT.
// source: minion.proto

package minion

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Query struct {
	Db                   string   `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d86c67c629e4a9, []int{0}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Namespaces struct {
	Names                []string  `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Sizes                []string  `protobuf:"bytes,2,rep,name=sizes,proto3" json:"sizes,omitempty"`
	Ok                   []float64 `protobuf:"fixed64,3,rep,packed,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Namespaces) Reset()         { *m = Namespaces{} }
func (m *Namespaces) String() string { return proto.CompactTextString(m) }
func (*Namespaces) ProtoMessage()    {}
func (*Namespaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d86c67c629e4a9, []int{1}
}

func (m *Namespaces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespaces.Unmarshal(m, b)
}
func (m *Namespaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespaces.Marshal(b, m, deterministic)
}
func (m *Namespaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespaces.Merge(m, src)
}
func (m *Namespaces) XXX_Size() int {
	return xxx_messageInfo_Namespaces.Size(m)
}
func (m *Namespaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespaces.DiscardUnknown(m)
}

var xxx_messageInfo_Namespaces proto.InternalMessageInfo

func (m *Namespaces) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *Namespaces) GetSizes() []string {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *Namespaces) GetOk() []float64 {
	if m != nil {
		return m.Ok
	}
	return nil
}

type Tables struct {
	Tables               []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tables) Reset()         { *m = Tables{} }
func (m *Tables) String() string { return proto.CompactTextString(m) }
func (*Tables) ProtoMessage()    {}
func (*Tables) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d86c67c629e4a9, []int{2}
}

func (m *Tables) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tables.Unmarshal(m, b)
}
func (m *Tables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tables.Marshal(b, m, deterministic)
}
func (m *Tables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tables.Merge(m, src)
}
func (m *Tables) XXX_Size() int {
	return xxx_messageInfo_Tables.Size(m)
}
func (m *Tables) XXX_DiscardUnknown() {
	xxx_messageInfo_Tables.DiscardUnknown(m)
}

var xxx_messageInfo_Tables proto.InternalMessageInfo

func (m *Tables) GetTables() []string {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d86c67c629e4a9, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Query)(nil), "minion.Query")
	proto.RegisterType((*Namespaces)(nil), "minion.Namespaces")
	proto.RegisterType((*Tables)(nil), "minion.Tables")
	proto.RegisterType((*Response)(nil), "minion.Response")
}

func init() { proto.RegisterFile("minion.proto", fileDescriptor_70d86c67c629e4a9) }

var fileDescriptor_70d86c67c629e4a9 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x37, 0x59, 0x1a, 0xec, 0x68, 0x4b, 0x19, 0x44, 0x82, 0x78, 0x58, 0x72, 0xea, 0x41,
	0xab, 0xa8, 0x4f, 0xe0, 0xa5, 0x5e, 0x14, 0xdc, 0xfa, 0x02, 0xd9, 0x76, 0x90, 0x65, 0xdd, 0x4d,
	0xdc, 0xa4, 0x07, 0x7d, 0x49, 0x5f, 0x49, 0x92, 0xcd, 0xa2, 0xf4, 0xe4, 0x2d, 0xdf, 0x3f, 0xff,
	0x0c, 0xff, 0x4f, 0xe0, 0xa4, 0xad, 0xbb, 0xda, 0x74, 0x2b, 0xdb, 0x1b, 0x6f, 0x50, 0x0c, 0xa4,
	0xae, 0x60, 0xf2, 0xb2, 0xa7, 0xfe, 0x13, 0xe7, 0xc0, 0x77, 0x95, 0x64, 0x05, 0x5b, 0x4e, 0x4b,
	0xbe, 0xab, 0xf0, 0x14, 0x26, 0x1f, 0x61, 0x20, 0x79, 0x94, 0x06, 0x50, 0x8f, 0x00, 0xcf, 0xba,
	0x25, 0x67, 0xf5, 0x96, 0x5c, 0xf0, 0x74, 0x81, 0x24, 0x2b, 0xf2, 0xe0, 0x89, 0x10, 0x54, 0x57,
	0x7f, 0x91, 0x93, 0x7c, 0x50, 0x23, 0x84, 0xfb, 0xa6, 0x91, 0x79, 0x91, 0x2f, 0x59, 0xc9, 0x4d,
	0xa3, 0x0a, 0x10, 0xaf, 0xba, 0x7a, 0x27, 0x87, 0x67, 0x20, 0x7c, 0x7c, 0xa5, 0x33, 0x89, 0xd4,
	0x05, 0x1c, 0x95, 0xe4, 0xac, 0xe9, 0x1c, 0xe1, 0x02, 0xf2, 0xd6, 0xbd, 0xa5, 0x78, 0xe1, 0x79,
	0xfb, 0xcd, 0x40, 0x3c, 0xc5, 0x0e, 0x78, 0x0f, 0xb3, 0x35, 0xf9, 0x3f, 0xb9, 0x66, 0xab, 0xd4,
	0x35, 0x56, 0x3b, 0xc7, 0x11, 0x7f, 0x2d, 0x2a, 0xc3, 0x4b, 0x98, 0xae, 0xc9, 0xa7, 0x0c, 0x07,
	0x1b, 0xf3, 0x11, 0x87, 0xb1, 0xca, 0xf0, 0x06, 0x8e, 0x37, 0x5e, 0xf7, 0xfe, 0x41, 0x6f, 0x9b,
	0xbd, 0x3d, 0xf4, 0x2f, 0x46, 0x1c, 0x03, 0xab, 0x0c, 0xaf, 0x01, 0x36, 0xde, 0xd8, 0x7f, 0x2f,
	0x54, 0x22, 0xfe, 0xcc, 0xdd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x04, 0x65, 0x50, 0xa9,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MinionClient is the client API for Minion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinionClient interface {
	GetNamespaces(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Namespaces, error)
	GetTables(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tables, error)
	StartBackup(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	StopBackup(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type minionClient struct {
	cc *grpc.ClientConn
}

func NewMinionClient(cc *grpc.ClientConn) MinionClient {
	return &minionClient{cc}
}

func (c *minionClient) GetNamespaces(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Namespaces, error) {
	out := new(Namespaces)
	err := c.cc.Invoke(ctx, "/minion.Minion/GetNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetTables(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tables, error) {
	out := new(Tables)
	err := c.cc.Invoke(ctx, "/minion.Minion/GetTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) StartBackup(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/minion.Minion/StartBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) StopBackup(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/minion.Minion/StopBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinionServer is the server API for Minion service.
type MinionServer interface {
	GetNamespaces(context.Context, *Query) (*Namespaces, error)
	GetTables(context.Context, *Query) (*Tables, error)
	StartBackup(context.Context, *Query) (*Response, error)
	StopBackup(context.Context, *Query) (*Response, error)
}

func RegisterMinionServer(s *grpc.Server, srv MinionServer) {
	s.RegisterService(&_Minion_serviceDesc, srv)
}

func _Minion_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minion.Minion/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetNamespaces(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minion.Minion/GetTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetTables(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_StartBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).StartBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minion.Minion/StartBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).StartBackup(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_StopBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).StopBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minion.Minion/StopBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).StopBackup(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Minion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minion.Minion",
	HandlerType: (*MinionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespaces",
			Handler:    _Minion_GetNamespaces_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _Minion_GetTables_Handler,
		},
		{
			MethodName: "StartBackup",
			Handler:    _Minion_StartBackup_Handler,
		},
		{
			MethodName: "StopBackup",
			Handler:    _Minion_StopBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minion.proto",
}
